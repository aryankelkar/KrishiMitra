import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { 
  Mic, 
  MicOff, 
  Send, 
  Bot, 
  User, 
  Volume2, 
  VolumeX,
  Sprout,
  MessageCircle
} from "lucide-react";
import { useTranslation } from 'react-i18next';

interface Message {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
  isVoice?: boolean;
}

const ChatbotInterface = () => {
  const { t, i18n } = useTranslation();
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'bot',
      content: i18n.language === 'hi' ? 'рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдЖрдк рдореБрдЭрд╕реЗ рдлрд╕рд▓, рдореМрд╕рдо, рдпрд╛ рдХреГрд╖рд┐ рд╕рдВрдмрдВрдзреА рдХреЛрдИ рднреА рдкреНрд░рд╢реНрди рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред ЁЯМ╛' : i18n.language === 'pa' ? 'ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓! риорйИриВ ридрйБри╣ри╛рибри╛ риЦрйЗридрйА ри╕ри╣ри╛риЗриХ ри╣ри╛риВред ридрйБри╕рйАриВ риорйИриирйВрй░ рилри╕ри▓, риорйМри╕рио риЬри╛риВ риЦрйЗридрйА римри╛ри░рйЗ риХрйБриЭ ри╡рйА рикрйБрй▒риЫ ри╕риХрижрйЗ ри╣рйЛред ЁЯМ╛' : "Hello! I'm your farming assistant. Ask me about crops, weather, or agriculture. ЁЯМ╛",
      timestamp: new Date()
    }
  ]);
  
  const [inputMessage, setInputMessage] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const [isListening, setIsListening] = useState(true);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleSendMessage = () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');

    // Simulate bot response
    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: getBotResponse(inputMessage, i18n.language),
        timestamp: new Date()
      };
      setMessages(prev => [...prev, botResponse]);
    }, 1000);
  };

  const getBotResponse = (message: string, lang: string): string => {
    const responses = {
      hi: {
        weather: "рдЖрдЬ рдХрд╛ рдореМрд╕рдо рдЕрдЪреНрдЫрд╛ рд╣реИред рддрд╛рдкрдорд╛рди 28┬░C рд╣реИ, рдЖрд░реНрджреНрд░рддрд╛ 65% рд╣реИред рдлрд╕рд▓ рдХреА рд╕рд┐рдВрдЪрд╛рдИ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╕рдордп рд╣реИред",
        crop: "рдЖрдкрдХреА рдлрд╕рд▓ рд╕реНрд╡рд╕реНрде рджрд┐рдЦ рд░рд╣реА рд╣реИред рдирд┐рдпрдорд┐рдд рдкрд╛рдиреА рджреЗрдВ рдФрд░ рдЦрд░рдкрддрд╡рд╛рд░ рд╕реЗ рдмрдЪрд╛рд╡ рдХрд░реЗрдВред",
        pest: "рдХреАрдЯ рд╕рдВрдХреНрд░рдордг рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдо рдХрд╛ рддреЗрд▓ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВред рдЬреИрд╡рд┐рдХ рдХреАрдЯрдирд╛рд╢рдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
        soil: "рдорд┐рдЯреНрдЯреА рдХреА рдЧреБрдгрд╡рддреНрддрд╛ рд╕реБрдзрд╛рд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЬреИрд╡рд┐рдХ рдЦрд╛рдж, рдХрдВрдкреЛрд╕реНрдЯ рдФрд░ рд╣рд░реА рдЦрд╛рдж рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред рдорд┐рдЯреНрдЯреА рдХреА рдЬрд╛рдВрдЪ рдХрд░рд╡рд╛рдПрдВред",
        irrigation: "рдлрд╕рд▓ рдХреА рд╕рд┐рдВрдЪрд╛рдИ рд╕реБрдмрд╣ рдпрд╛ рд╢рд╛рдо рдХреЗ рд╕рдордп рдХрд░реЗрдВред рдорд┐рдЯреНрдЯреА рдХреА рдирдореА рдХреЗ рдЕрдиреБрд╕рд╛рд░ рд╕рд┐рдВрдЪрд╛рдИ рдХрд░реЗрдВред",
        fertilizer: "рдлрд╕рд▓ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдЙрд░реНрд╡рд░рдХ рдХрд╛ рдЪреБрдирд╛рд╡ рдХрд░реЗрдВред NPK рдХрд╛ рд╕рдВрддреБрд▓рд┐рдд рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред рдЬреИрд╡рд┐рдХ рдЙрд░реНрд╡рд░рдХ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рджреЗрдВред",
        harvest: "рдХрдЯрд╛рдИ рдХрд╛ рд╕рд╣реА рд╕рдордп рдлрд╕рд▓ рдХреА рдкрдХрд╛рд╡ рдЕрд╡рд╕реНрдерд╛ рдкрд░ рдирд┐рд░реНрднрд░ рдХрд░рддрд╛ рд╣реИред рдкреВрд░реА рддрд░рд╣ рдкрдХрдиреЗ рдХреЗ рдмрд╛рдж рдХрдЯрд╛рдИ рдХрд░реЗрдВред",
        market: "рдЖрдЬ рдХреЗ рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ рдЕрдЪреНрдЫреЗ рд╣реИрдВред рдЧреЗрд╣реВрдВ 2500 рд░реБрдкрдпреЗ рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓, рдЪрдирд╛ 4000 рд░реБрдкрдпреЗ рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓ред",
        default: "рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред рдЖрдк рдореБрдЭрд╕реЗ рдлрд╕рд▓, рдореМрд╕рдо, рдпрд╛ рдХреГрд╖рд┐ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред"
      },
      en: {
        weather: "Today's weather is good. Temperature is 28┬░C, humidity 65%. Good time for crop irrigation.",
        crop: "Your crops look healthy. Water regularly and protect from weeds.",
        pest: "To prevent pest infestation, spray neem oil. Use organic pesticides.",
        soil: "To improve soil health, use organic manure, compost, and green manure. Get soil tested regularly.",
        irrigation: "Irrigate crops in the morning or evening. Water according to soil moisture levels.",
        fertilizer: "Choose fertilizers based on crop needs. Use balanced NPK. Prefer organic fertilizers.",
        harvest: "Harvest timing depends on crop maturity. Harvest when fully ripe for best quality.",
        market: "Today's market prices are good. Wheat тВ╣2500/quintal, Chickpea тВ╣4000/quintal.",
        default: "I'm here to help you. You can ask me about crops, weather, or agriculture."
      },
      pa: {
        weather: "риЕрй▒риЬ риорйМри╕рио ри╡ризрйАриЖ ри╣рйИред ридри╛рикриори╛рии 28┬░C ри╣рйИ, риири╛риВриорйА 65%ред ри╕ри┐рй░риЪри╛риИ ри▓риИ риЪрй░риЧри╛ ри╕риори╛риВ ри╣рйИред",
        crop: "ридрйБри╣ри╛рибрйАриЖриВ рилри╕ри▓ри╛риВ ри╕ри┐ри╣ридриорй░риж ри▓рй▒риЧрижрйАриЖриВ ри╣рииред риири┐риприори┐рид рикри╛ригрйА рижри┐риУ риЕридрйЗ риШри╛ри╣-рилрйВри╕ ридрйЛриВ римриЪри╛риУред",
        pest: "риХрйАриЯри╛риВ ридрйЛриВ римриЪриг ри▓риИ риирйАрио ридрйЗри▓ рижри╛ риЫри┐рйЬриХри╛риЕ риХри░рйЛред риЬрйИри╡ри┐риХ риХрйАриЯриири╛ри╢риХ ри╡ри░ридрйЛред",
        soil: "риори┐рй▒риЯрйА рижрйА риЧрйБригри╡рй▒ридри╛ ри╕рйБризри╛ри░рии ри▓риИ риЬрйИри╡ри┐риХ риЦри╛риж, риХрй░рикрйЛри╕риЯ риЕридрйЗ ри╣ри░рйА риЦри╛риж ри╡ри░ридрйЛред риори┐рй▒риЯрйА рижрйА риЬри╛риВриЪ риХри░ри╡ри╛риУред",
        irrigation: "рилри╕ри▓ рижрйА ри╕ри┐рй░риЪри╛риИ ри╕ри╡рйЗри░рйЗ риЬри╛риВ ри╕ри╝ри╛рио риирйВрй░ риХри░рйЛред риори┐рй▒риЯрйА рижрйА риириорйА риЕриирйБри╕ри╛ри░ рикри╛ригрйА рижри┐риУред",
        fertilizer: "рилри╕ри▓ рижрйЗ риЕриирйБри╕ри╛ри░ риЦри╛риж риЪрйБригрйЛред ри╕рй░ридрйБри▓ри┐рид NPK ри╡ри░ридрйЛред риЬрйИри╡ри┐риХ риЦри╛риж риирйВрй░ ридри░риЬрйАри╣ рижри┐риУред",
        harvest: "риХриЯри╛риИ рижри╛ ри╕риори╛риВ рилри╕ри▓ рижрйА рикрй▒риХриг рижрйА риЕри╡ри╕риери╛ 'ридрйЗ риири┐ри░ринри░ риХри░рижри╛ ри╣рйИред рикрйВри░рйА ридри░рйНри╣ри╛риВ рикрй▒риХриг ридрйЛриВ римри╛риЕриж риХриЯри╛риИ риХри░рйЛред",
        market: "риЕрй▒риЬ рижрйЗ риорй░рибрйА ринри╛ри╡ риЪрй░риЧрйЗ ри╣рииред риЧрйЗри╣рйВрй░ тВ╣2500/риХрйБриЗрй░риЯри▓, риЪриири╛ тВ╣4000/риХрйБриЗрй░риЯри▓ред",
        default: "риорйИриВ риорижриж ри▓риИ ри╣ри╛риЬри╝ри░ ри╣ри╛риВред ридрйБри╕рйАриВ рилри╕ри▓, риорйМри╕рио риЬри╛риВ риЦрйЗридрйА римри╛ри░рйЗ рикрйБрй▒риЫ ри╕риХрижрйЗ ри╣рйЛред"
      }
    } as const;

    const currentLang = (responses as any)[lang] || responses.hi;
    const lower = message.toLowerCase();
    
    if (lower.includes('weather') || message.includes('рдореМрд╕рдо') || message.includes('риорйМри╕рио')) {
      return currentLang.weather;
    } else if (lower.includes('crop') || message.includes('рилри╕ри▓') || message.includes('рдлрд╕рд▓')) {
      return currentLang.crop;
    } else if (lower.includes('pest') || message.includes('риХрйАриЯ') || message.includes('рдХреАрдЯ')) {
      return currentLang.pest;
    } else if (lower.includes('soil') || message.includes('рдорд┐рдЯреНрдЯреА') || message.includes('риори┐рй▒риЯрйА')) {
      return currentLang.soil;
    } else if (lower.includes('irrigation') || message.includes('рд╕рд┐рдВрдЪрд╛рдИ') || message.includes('ри╕ри┐рй░риЪри╛риИ')) {
      return currentLang.irrigation;
    } else if (lower.includes('fertilizer') || message.includes('рдЙрд░реНрд╡рд░рдХ') || message.includes('риЦри╛риж')) {
      return currentLang.fertilizer;
    } else if (lower.includes('harvest') || message.includes('рдХрдЯрд╛рдИ') || message.includes('риХриЯри╛риИ')) {
      return currentLang.harvest;
    } else if (lower.includes('market') || message.includes('рдмрд╛рдЬрд╛рд░') || message.includes('риорй░рибрйА')) {
      return currentLang.market;
    }
    
    return currentLang.default;
  };

  const toggleRecording = () => {
    setIsRecording(!isRecording);
    if (!isRecording) {
      alert('Voice recording started! (Simulated)');
    } else {
      alert('Voice recording stopped! (Simulated)');
    }
  };

  const toggleListening = () => {
    setIsListening(!isListening);
    if (isListening) {
      alert('Assistant muted');
    } else {
      alert('Assistant listening');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/10 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <img src="/logo.png" alt="logo" className="h-8 w-8" />
              <div>
                <h1 className="text-2xl font-bold text-foreground">{t('chatbot.title')}</h1>
                <p className="text-muted-foreground">{t('chatbot.subtitle')}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Chat Interface */}
        <Card className="min-h-[500px] max-h-[calc(100vh-200px)] flex flex-col shadow-strong hover:shadow-strong transition-all duration-300">
          <CardHeader className="pb-3 flex-shrink-0 bg-gradient-to-r from-primary/5 to-accent/5">
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center gap-2 text-gradient">
                <MessageCircle className="h-5 w-5 animate-float" />
                {t('chatbot.chatTitle')}
              </CardTitle>
              <div className="flex gap-2">
                <Badge variant={isListening ? "default" : "secondary"} className="flex items-center gap-1 animate-pulse-glow">
                  {isListening ? <Volume2 className="h-3 w-3" /> : <VolumeX className="h-3 w-3" />}
                  {isListening ? t('chatbot.listening') : t('chatbot.muted')}
                </Badge>
              </div>
            </div>
          </CardHeader>
          
          <CardContent className="flex-1 flex flex-col p-4 min-h-0">
            {/* Messages */}
            <ScrollArea className="flex-1 mb-4 min-h-0">
              <div className="space-y-4 pr-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex gap-3 ${message.type === 'user' ? 'flex-row-reverse' : ''}`}
                  >
                    <div className={`p-2 rounded-full flex-shrink-0 ${
                      message.type === 'user' 
                        ? 'bg-primary text-primary-foreground' 
                        : 'bg-accent text-accent-foreground'
                    }`}>
                      {message.type === 'user' ? <User className="h-4 w-4" /> : <Bot className="h-4 w-4" />}
                    </div>
                    
                    <div className={`max-w-[80%] ${message.type === 'user' ? 'text-right' : ''}`}>
                      <div className={`inline-block p-3 rounded-lg ${
                        message.type === 'user'
                          ? 'bg-primary text-primary-foreground'
                          : 'bg-muted text-muted-foreground'
                      }`}>
                        <p className="text-sm break-words">{message.content}</p>
                      </div>
                      <p className="text-xs text-muted-foreground mt-1">
                        {message.timestamp.toLocaleTimeString()}
                      </p>
                    </div>
                  </div>
                ))}
                <div ref={messagesEndRef} />
              </div>
            </ScrollArea>

            {/* Input Area */}
            <div className="flex-shrink-0">
              <div className="flex gap-2">
                <div className="flex-1 flex gap-2">
                  <Input
                    ref={inputRef}
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                    placeholder={t('chatbot.inputPlaceholder')}
                    className="flex-1"
                  />
                  
                  <Button
                    variant={isRecording ? "destructive" : "outline"}
                    size="icon"
                    onClick={toggleRecording}
                    className="shrink-0"
                  >
                    {isRecording ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
                  </Button>
                  
                  <Button
                    onClick={handleSendMessage}
                    disabled={!inputMessage.trim()}
                    className="shrink-0"
                  >
                    <Send className="h-4 w-4" />
                  </Button>
                </div>
              </div>

            {/* Quick Actions */}
            <div className="flex flex-wrap gap-2 mt-3">
              {[
                { text: t('chatbot.quickWeather'), action: () => setInputMessage(t('chatbot.quickWeatherQ')) },
                { text: t('chatbot.quickCrop'), action: () => setInputMessage(t('chatbot.quickCropQ')) },
                { text: t('chatbot.quickPest'), action: () => setInputMessage(t('chatbot.quickPestQ')) },
                { text: t('chatbot.quickMarket'), action: () => setInputMessage(t('chatbot.quickMarketQ')) },
                { text: t('chatbot.quickSoil'), action: () => setInputMessage(t('chatbot.quickSoilQ')) },
                { text: t('chatbot.quickIrrigation'), action: () => setInputMessage(t('chatbot.quickIrrigationQ')) },
                { text: t('chatbot.quickFertilizer'), action: () => setInputMessage(t('chatbot.quickFertilizerQ')) },
                { text: t('chatbot.quickHarvest'), action: () => setInputMessage(t('chatbot.quickHarvestQ')) }
              ].map((item, index) => (
                <Button
                  key={index}
                  variant="outline"
                  size="sm"
                  onClick={item.action}
                  className="text-xs hover:bg-primary/10 hover-lift transition-all duration-300 hover-glow"
                >
                  {item.text}
                </Button>
              ))}
            </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default ChatbotInterface;